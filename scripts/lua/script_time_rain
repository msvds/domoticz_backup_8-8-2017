----------------------------------------------------------------------------------------------------------------
-- IsItGonnaRain( int minutesinfuture)
-- returns: int avarage rainfall for the next minutesinfuture
--
-- Function to get rain prediction from Buienradar.nl (dutch)
-- 
-- http://gratisweerdata.buienradar.nl/#Buienradar You may use their free service for non-commercial purposes. 
-- 
-- Written in LUA by Hans van der Heijden (h4nsie @ gmail.com)
-- Spring 2015
-- 14-11-2016 v0.4 changed lat/lon to max 2 decmals after comma
-- 28-03-2015 v0.3 bug: quotes around url added.
-- 27-03-2015 v0.2 return value is now average for next time
-- 26-03-2015 v0.1 Initial release
-- todo: some error checking on http and file handling (tmp file)

--------------------------------
------ Variables to edit ------
--------------------------------
MessageInterval = 600 --Interval of sending email notifications
debug=false
--------------------------------
-- End of variables to edit --
--------------------------------
----------------------------------------------------------------------------------------------------------------
function IsItGonnaRain( minutesinfuture )
-- config ---------------------------------------------------------
  lat='51.64'   -- example lat/lon for Den Haag
  lon='4.59'  -- NOTE: lat and lon should have max 2 decimals after comma to function (requirement Buienrader)
  tempfilename = '/var/tmp/rain.tmp' -- can be anywhere writeable
-- config ---------------------------------------------------------
 
  -- url='http://gps.buienradar.nl/getrr.php?lat='..lat..'&lon='..lon
  -- isn't working sice 2016/08/29: url is changed in:
  url='http://gadgets.buienradar.nl/data/raintext?lat='..lat..'&lon='..lon
  --if debug then print(url) end
  read = os.execute('curl -s -o '..tempfilename..' "'..url..'"')
  file = io.open(tempfilename, "r")
  totalrain=0
  rainlines=0
  -- now analyse the received lines, format is like 000|15:30 per line.
  while true do 
     line = file:read("*line")
     if not line then break end
     --if debug then print('script_time_rain: Line:'..line) end
     linetime=string.sub(tostring(line), 5, 9)
     --if debug then print('script_time_rain: Linetime: '..linetime) end
 
        -- Linetime2 holds the full date calculated from the time on a line
        linetime2 = os.time{year=os.date('%Y'), month=os.date('%m'), day=os.date('%d'), hour=string.sub(linetime,1,2), min=string.sub(linetime,4,5), sec=os.date('%S')}
        difference = os.difftime (linetime2,os.time())
 
     -- When a line entry has a time in the future AND is in the given range, then totalize the rainfall
     if ((difference > 0) and (difference<=minutesinfuture*60)) then
        --if debug then print('script_time_rain: Line in time range found') end
        rain=tonumber(string.sub(tostring(line), 0, 3))
        totalrain = totalrain+rain
        rainlines=rainlines+1
        --if debug then print('script_time_rain: Rain in timerange: '..rain) end
        --if debug then print('script_time_rain: Total rain now: '..totalrain) end
        --if debug then print('script_time_rain: Rainlines: '..rainlines) end
     end
 
  end
  file:close()
 
  -- Returned value is average rain fall for next time
  -- 0 is no rain, 255 is very heavy rain
  -- When needed, mm/h is calculated by 10^((value -109)/32) (example: 77 = 0.1 mm/hour)
  averagerain=totalrain/rainlines
  if debug then print('script_time_rain: Averagerain: '..averagerain) end
 
return(averagerain)
end

function message (u)
    if debug then print('script_time_rain: entered message '..u) end
    if debug then print('script_time_rain: time '..t1) end
    if debug then print('script_time_rain: lastMessageSent + MessageInterval '..lastMessageSent + MessageInterval) end    
    if (t1 > lastMessageSent + MessageInterval) then
        commandArray['SendNotification']=u
        os.execute ('/usr/local/bin/izsynth -e voicerss -v nl-nl -W 75 -t ' ..u)
        os.execute ('/usr/local/bin/izsynth -e voicerss -v nl-nl -W 75 -t ' ..u)
    end
    commandArray["Variable:RainMessage"] = tostring(t1) --Last run time of the script is updated to RainMessage variable
end
 
commandArray = {}

if debug then print("starting script_time_rain") end
time = os.date("*t")
t1 = os.time()
lastMessageSent = uservariables["RainMessage"] --Time in system seconds when last message was sent
if debug then print('script_time_rain: lastMessageSent: '..lastMessageSent) end
--if debug then print('script_time_rain: time.min: '..time.min) end
--if debug then print('script_time_rain: time.min % 15: '..time.min % 15) end
--if debug then print('script_time_rain: time.min % 1: '..time.min % 1) end
if ((time.min % 1)==0) then
--if ((time.min % 15)==0) then
    --run every 15 min
   ----- REGEN ------
   minuten=60
   regen = IsItGonnaRain(minuten)
   if debug then print('script_time_rain: Regen verwacht: '..regen..' mm binnen '..minuten..' minuten.') end
 
    if regen > 120 then
      message('Regenscript#Regen verwacht')
      commandArray['Rain expected']='On'
      commandArray['Rain Expected Levels']='Set Level: 50'
    elseif regen > 75 then
      message('Regenscript#Regen verwacht')
      commandArray['Rain expected']='On'
      commandArray['Rain Expected Levels']='Set Level: 40'
    elseif regen > 40 then
      message('Regenscript#Regen verwacht')
      commandArray['Rain expected']='On'
      commandArray['Rain Expected Levels']='Set Level: 30'
    elseif regen > 1 then
      message('Regenscript#Regen verwacht')
      commandArray['Rain expected']='On'
      commandArray['Rain Expected Levels']='Set Level: 20'
    else
       message('Regenscript#Geen regen meer verwacht')
       commandArray['Rain expected']='Off'
      commandArray['Rain Expected Levels']='Set Level: 10'
    end   
 
end 
if debug then print("completed script_time_rain") end
return commandArray
